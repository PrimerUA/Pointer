Pointer API
Updated: 10.02.2014

+==========================MVP=======================+
1) получить id по email
Mehod: POST
Url: http://tq.svit.co/pointer/reggoogle.php
Parametrs: { "email":"maxml@inbox.ru"}
Output: {"code":0,"id":2}

2) получить registrationId по userId
Mehod: POST
Url: http://tq.svit.co/pointer/regid.php
Parametrs: { "userID":"1", "regID":"APA91bHYQAejWJJLg7ClopjPkdfg85GXdup3U0jqc0ttFEhAY5Ele-FprUye5dFhqQAgPa_Fpjt-FA6GHj7vOzyfj2LuEcOD5c4bUnAlnA36ucr9EVuVfeI76wYty64-71vrpB-xbY9bmDLjL0tajWjyNo6Zdom-JQ"}
Output: {"code":0}

3) изменение профиля 
Mehod: POST
Url: http://tq.svit.co/pointer/updateUserInfo.php
Parametrs: 
Output: {"code":0}
POST-запрос со всеми полями пользователя
//0-девушка, 1-мальчик

4) получение списка людей, с которыми можно поговорить
Mehod: GET
Url: http://tq.svit.co/pointer/list.php?id=2&count=3
Parametrs: id - id пользователя, count - кол-во записей
Output: {"code":0, proposals: []}

5) отправка запроса на обмен личной инфой
Mehod: GET
Url: http://tq.svit.co/pointer/send.php?user=2&recipient=1
Parametrs: user - user id, recipient - recipient id
Output: {"code":"0","result":"{"multicast_id":4650836146097217816,"success":1,"failure":0,"canonical_ids":0,"results":[{"message_id":"0:1392224855600156%61550ec3f9fd7ecd"}]}"}

4) подтверждение/неподтверждение заявки
Url: 
Parametrs: 
Output: 
 


+====================================================+


MainScreen

1) get: list[Point] - получение  списка координат точек от сервера для нанесения на карту (параметры from, length)
Input: entity User
Fields: int userId, double latitude, longitude
Output: list of Point //int id, double latitude, longitude
Input example: {"latitude":"78.4", "latitude":"13.5"}
2) post: registration - регистрация пользователя
Input: entity User
Fields: string name, email
Output: id of this user
Input example: {"name":"test", "email":"test@test.com"}

PointDetailsScreen

2.1) get: Point - получение деталей выбранной точки (параметр pointId)
Input: entity User
Fields: int userId, double latitude, longitude
Output: list of Point //int id, double latitude, longitude
Input example: {"latitude":"78.4", "latitude":"13.5"}
2.2) post:согласие на встречу
Input: int pointId, int userId
Output: 202
2.3) отправка пуш уведомления партнеру о согласии - GCM


UserProfileScreen

3) get: UserInfo - получение полного профиля пользователя (параметр user_id)
Input: enity User
Fields: int idUser
Output: UserInfo // int idUser, boolean male, int age, string about, array int[50] rewards
Input example: {"idUser":"25"}

NewDescriptionScreen

4) post: Point - создание новой точки встречи (параметр point_id)
Input: entity Point
Fields: string url, title, long postDate, expireDate
Output: 202

ConfirmPointScreen

AllPointsScreen

6) get: list[PointView] - получение списка встреч с основной информацией о них (параметры from, length, type = 1, 2)
Input: entity User
Fields: int userId, int type
Output: list of Point //int id, string title, url, (type=2): partnerCode, ourCode
Input example: {"userId":"78", "type":"1"}


RewardsScreen

7) post: list[Rewards] - отправка наград, которые лайкнул пользователь своему партнеру (параметр user_id)
Input: entity Point
Fields: int code, array String[5] rewardName
Output: 202 либо ошибка

CurrentPointScreen

8.1) post: отказ от встречи 
Input: entity Point
Fields: int idPoint, int idUser
Output: String userName
8.2) GCM - отправка пуш уведомления партнеру об отказе